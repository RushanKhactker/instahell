// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hells.proto

package hells

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HellsId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HellsId) Reset()         { *m = HellsId{} }
func (m *HellsId) String() string { return proto.CompactTextString(m) }
func (*HellsId) ProtoMessage()    {}
func (*HellsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_236a46c97cdcac35, []int{0}
}

func (m *HellsId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HellsId.Unmarshal(m, b)
}
func (m *HellsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HellsId.Marshal(b, m, deterministic)
}
func (m *HellsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HellsId.Merge(m, src)
}
func (m *HellsId) XXX_Size() int {
	return xxx_messageInfo_HellsId.Size(m)
}
func (m *HellsId) XXX_DiscardUnknown() {
	xxx_messageInfo_HellsId.DiscardUnknown(m)
}

var xxx_messageInfo_HellsId proto.InternalMessageInfo

func (m *HellsId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Nothing struct {
	Dummy                bool     `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nothing) Reset()         { *m = Nothing{} }
func (m *Nothing) String() string { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()    {}
func (*Nothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_236a46c97cdcac35, []int{1}
}

func (m *Nothing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nothing.Unmarshal(m, b)
}
func (m *Nothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nothing.Marshal(b, m, deterministic)
}
func (m *Nothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nothing.Merge(m, src)
}
func (m *Nothing) XXX_Size() int {
	return xxx_messageInfo_Nothing.Size(m)
}
func (m *Nothing) XXX_DiscardUnknown() {
	xxx_messageInfo_Nothing.DiscardUnknown(m)
}

var xxx_messageInfo_Nothing proto.InternalMessageInfo

func (m *Nothing) GetDummy() bool {
	if m != nil {
		return m.Dummy
	}
	return false
}

func init() {
	proto.RegisterType((*HellsId)(nil), "hells.HellsId")
	proto.RegisterType((*Nothing)(nil), "hells.Nothing")
}

func init() { proto.RegisterFile("hells.proto", fileDescriptor_236a46c97cdcac35) }

var fileDescriptor_236a46c97cdcac35 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x24, 0xb9, 0xd8, 0x3d,
	0x40, 0x0c, 0xcf, 0x14, 0x21, 0x3e, 0x2e, 0x26, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x26, 0xcf, 0x14, 0x25, 0x79, 0x2e, 0x76, 0xbf, 0xfc, 0x92, 0x8c, 0xcc, 0xbc, 0x74, 0x21,
	0x11, 0x2e, 0xd6, 0x94, 0xd2, 0xdc, 0xdc, 0x4a, 0xb0, 0x2c, 0x47, 0x10, 0x84, 0x63, 0x64, 0xca,
	0xc5, 0x09, 0xd2, 0xeb, 0x9b, 0x98, 0x9d, 0x5a, 0x24, 0xa4, 0xc1, 0xc5, 0x02, 0x62, 0x08, 0xf1,
	0xe9, 0x41, 0x6c, 0x81, 0x6a, 0x95, 0x82, 0xf1, 0xa1, 0xb6, 0x28, 0x31, 0x24, 0xb1, 0x81, 0x1d,
	0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xb4, 0x2e, 0x47, 0x8f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HellMakerClient is the client API for HellMaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HellMakerClient interface {
	Make(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*HellsId, error)
}

type hellMakerClient struct {
	cc *grpc.ClientConn
}

func NewHellMakerClient(cc *grpc.ClientConn) HellMakerClient {
	return &hellMakerClient{cc}
}

func (c *hellMakerClient) Make(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*HellsId, error) {
	out := new(HellsId)
	err := c.cc.Invoke(ctx, "/hells.HellMaker/Make", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HellMakerServer is the server API for HellMaker service.
type HellMakerServer interface {
	Make(context.Context, *Nothing) (*HellsId, error)
}

func RegisterHellMakerServer(s *grpc.Server, srv HellMakerServer) {
	s.RegisterService(&_HellMaker_serviceDesc, srv)
}

func _HellMaker_Make_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellMakerServer).Make(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hells.HellMaker/Make",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellMakerServer).Make(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

var _HellMaker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hells.HellMaker",
	HandlerType: (*HellMakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Make",
			Handler:    _HellMaker_Make_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hells.proto",
}
